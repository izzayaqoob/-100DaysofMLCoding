# -*- coding: utf-8 -*-
"""Day 7 of #100DaysofML-regular, class and static methods in python (oop concepts).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aXboDBBl1HPjPFCUBkw0Duw51MKoYXjM
"""

# Python is case and indentation sensitive language. Brackets are mainly not used for separation in python,
# but indentation is used to separate stataments.

# Employee Class

class Employee: 
    # attributes
    raise_amount = 1.04
    number_of_employees = 0
 
 # Methods
 # Constructor
    def __init__(self, first, last, pay):
      self.first = first
      self.last = last
      self.pay = pay
      self.email = first + '.' + last + '@company.com'
      Employee.number_of_employees += 1

# Implementation of Regular methods
# A regular method automatically takes object or instance as its first argument called as self. 
    
    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
      self.pay = int(self.pay * self.raise_amount)
      return self.pay

# Impementation of Class methods
# A class method takes a class name as its first argument with the keyword 'cls' and also uses a decorator for the indication of it as a class method.    
   
    @ classmethod

    def set_raise_amt(cls, amount):
      cls.raise_amount = amount # assigning the attribute value of the class with the argument value
   
    @ classmethod
    def from_string(cls, emp_str):
      first, last, pay = emp_str.split('-')
      return cls(first, last, pay)
    
# Impementation of Static methods
# A static method does not necessarily depends on class or objects and also uses a decorator for the indication of it as a static method.
    @ staticmethod
    def is_workday(day):
      if day.weekday() == 5 or day.weekday() ==6:
        return False
      return True


    
  

emp_1 = Employee('Izza', 'Yaqoob', 700000)
emp_2 = Employee('Test','Employee', 100000)

print('Raise amount of class Employee: ', Employee.raise_amount)
print('Raise amount of instance Employee 1: ', emp_1.raise_amount)
print('Raise amount of instance Employee 2: ', emp_2.raise_amount)

# print('Employee 1 pay: ',emp_1.pay)
# print('Employee class total instances: ',Employee.number_of_employees)
# print('Employee 2 pay: ',emp_2.pay)
# print('Raised pay of Employee 2: ',Employee.apply_raise(emp_2))
Employee.set_raise_amt(1.05)

print('Raise amount of class Employee after calling set_raise_amt method (class method): ', Employee.raise_amount)
print('Raise amount of instance Employee 1: ', emp_1.raise_amount)
print('Raise amount of instance Employee 2: ', emp_2.raise_amount)

# Calling class method
emp_str_1 = 'John-Doe-80977'
emp_str_2 = 'Corey-Schafer-902834'
new_emp = Employee.from_string(emp_str_1)

print("New Employee pay after calling from_string class method: ", new_emp.pay)

# calling static method

import datetime # library for getting current date and time
my_date = datetime.date(2022, 9, 12) # saving a date

print("Work day? ",Employee.is_workday(my_date)) # passing the initialized date value

